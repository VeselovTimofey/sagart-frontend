/* eslint-disable @typescript-eslint/naming-convention */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Получить список пользователей */
    get: operations['getAllUsers'];
    put?: never;
    /** Создать нового пользователя */
    post: operations['createUser'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user/{user_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Получить личный кабинет пользователя */
    get: operations['getUserById'];
    /** Изменить личный кабинет пользователя */
    put: operations['putUserById'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/Author': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Получить список авторов */
    get: operations['getAllAuthors'];
    put?: never;
    /** Создать нового автора */
    post: operations['createAuthor'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/Author/{Author_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Получить карточку автора */
    get: operations['getAuthorById'];
    /** Изменить карточку автора */
    put: operations['putAuthorById'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/Product': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Получить список товаров */
    get: operations['getAllProducts'];
    put?: never;
    /** Создать новую карточку товара */
    post: operations['createProduct'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/Product/{Product_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Получить карточку товара */
    get: operations['getProductById'];
    /** Изменить карточку товара */
    put: operations['putProductById'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/Subscribe': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Получить список подписок */
    get: operations['getAllSubscribes'];
    put?: never;
    /** Создать новую подписку */
    post: operations['createSubscribe'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/Subscribe/{Subscribe_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Получить информацию о подписке */
    get: operations['getSubscribeById'];
    /** Изменить подписку */
    put: operations['putSubscribeById'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/Analytic_prod/{Analytic_prod_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Получить аналитику по товару */
    get: operations['getAnalyticProdById'];
    /** Изменить аналитику товара */
    put: operations['putAnallyticProdById'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    User: {
      id?: number;
      login?: string;
      phone?: string;
      first_name?: string;
      last_name?: string;
      email?: string;
      pass?: string;
    };
    Users: components['schemas']['Users'][];
    Author: {
      id?: number;
      first_name?: string;
      last_name?: string;
      nick_name?: string;
      photo?: string;
      /** Format: uri */
      videocard?: string;
      biograthy?: string;
      education?: string;
      /** @enum {string} */
      gender?: 'male' | 'famale';
      year_of_birth?: number;
      place_of_birth?: string;
      /** Format: uri */
      sotial_network?: string;
    };
    Authors: components['schemas']['Authors'][];
    Product: {
      id?: number;
      product_name?: string;
      product_descrition_id?: number;
      product_author_id?: number;
      product_make_date?: string;
      product_size?: string;
      product_weight?: number;
      product_edition?: string;
      protuct_auth_signature?: boolean;
      /** Format: url */
      product_photo?: string;
      product_type?: string;
      product_category?: string;
      product_status?: string;
      product_price?: number;
    };
    Products: components['schemas']['Products'][];
    Subscribe: {
      id?: number;
      status?: string;
      /**
       * Format: 2024-05-28T15:00:00+03
       * @description Дата начала подписки
       */
      start_date?: string;
      /**
       * Format: 2025-05-28T15:00:00+03
       * @description Дата окончания подписки
       */
      end_date?: string;
    };
    Subscribes: components['schemas']['Subscribes'][];
    Analytic_prod: {
      id?: number;
      article?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getAllUsers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description успешный ответ со списком пользователей */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Users'];
        };
      };
    };
  };
  createUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['User'];
      };
    };
    responses: {
      /** @description успешный ответ с новым личным кабинетом пользователя */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['User'];
        };
      };
    };
  };
  getUserById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description идентификатор пользователя */
        user_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description успешный ответ с личным кабинетом пользователя */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['User'];
        };
      };
    };
  };
  putUserById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description идентификатор пользователя */
        user_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description успешный ответ с измененным личным кабинетом пользователя */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['User'];
        };
      };
    };
  };
  getAllAuthors: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description успешный ответ со списком авторов */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Authors'];
        };
      };
    };
  };
  createAuthor: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Author'];
      };
    };
    responses: {
      /** @description успешный ответ с новой карточкой автора */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Author'];
        };
      };
    };
  };
  getAuthorById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description идентификатор пользователя */
        Author_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description успешный ответ с карточкой автора */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Author'];
        };
      };
    };
  };
  putAuthorById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description идентификатор автора */
        Author_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description успешный ответ с измененной карточкой автора */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Author'];
        };
      };
    };
  };
  getAllProducts: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description успешный ответ со списком товаров */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Products'];
        };
      };
    };
  };
  createProduct: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Product'];
      };
    };
    responses: {
      /** @description успешный ответ с новой карточкой товара */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Product'];
        };
      };
    };
  };
  getProductById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description идентификатор пользователя */
        Product_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description успешный ответ с карточкой товара */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Product'];
        };
      };
    };
  };
  putProductById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description идентификатор товара */
        Product_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description успешный ответ с измененной карточкой товара */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Product'];
        };
      };
    };
  };
  getAllSubscribes: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description успешный ответ со списком подписок */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Subscribes'];
        };
      };
    };
  };
  createSubscribe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Subscribe'];
      };
    };
    responses: {
      /** @description успешный ответ с новой подпиской */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Subscribe'];
        };
      };
    };
  };
  getSubscribeById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description идентификатор подписки */
        Subscribe_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description успешный ответ с информацией о подписке */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Subscribe'];
        };
      };
    };
  };
  putSubscribeById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description идентификатор подписки */
        Subscribe_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description успешный ответ с измененной подпиской */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Subscribe'];
        };
      };
    };
  };
  getAnalyticProdById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description идентификатор аналитики товара */
        Analytic_prod_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description успешный ответ с информацией об аналитике товара */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Analytic_prod'];
        };
      };
    };
  };
  putAnallyticProdById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description идентификатор подписки */
        Analytic_prod_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description успешный ответ с измененной Аналитикой по товару */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Analytic_prod'];
        };
      };
    };
  };
}
